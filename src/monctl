#! /usr/bin/bash

# Monitor Controller - Routine Mode (this script)
#                    - Release Mode (TBD - in dev)

# Execute on an RTI ops or test servers as the rti user
#   SVRK1 (k1 instruments), SVRK2 (k2 instruments), or SVRBLD (k0, k1 and k2 instr combined)
#   servers are auto-detected by the script

# Usage:
# (0) General
#   $ cd to script location
#   $ monctl [cmd] [svr]             full command with args
#                                    for all servers
#                                      - cmd restart|start|stop|status, where status is default
#                                    for test server, only
#                                      - svr [k1|k2|k0] where k0 = k1 + k2 is default
# (1) on ops servers
#   $ monctl [restart|start|stop|[status]]   full command with args
#   $ monctl                                 assumes status command on respective server
#   $ monctl status                          default, same as previous
#   $ monctl restart|start|stop              k1 | k2 is default on ops servers
#                                            on test server, specify k1|k2 otherwise, k0 for k1+k2 is default

# (2) on test server: 
#     Running all (k0 default, k1+k2) vs specific server (restart|start|stop|status k1|k2)
#   $ monctl                            all: compares running processes to sum of k1 + k2
#   $ monctl status                     same as all
#   $ monctl restart|start|stop         runs on all k1 and k2 servers
#   $ monctl restart|start|stop k1|k2   specific: runs for specified k1 or k2 server

# ToDo(s):
# - Routine Mode:
#   - convert to Python 3
#     - use config.live.ini
#     - track and report skipped instruments list (already running, terminated)
#     - implement --list parameter
#     - (opt) refine to track proc list and wait, recheck, stop again, until all requested processes have terminated
#       - (opt) track number of monitors per instrument (track, wait or terminate, verify, retry|terminate extras)
#       - (opt) report missing (not running) L0 and DRP monitors, instrument/subsystem not available
#       - (opt) track number of processes per server (on SVRBLD, k0-1 and k0-2)
# - Release Mode: TBD

# This should be implemented in the --list/--nolist arguments, TBD.
# For now, comment or uncomment, as needed.
#
# Note: Leave the "all*" instrument lists uncommented and adjust the run list below them or add custom list(s)

#wait_secs=3    # dev
wait_secs=10   # ops

## ===== k1 monitors ===== ##

# k1 L0 monitors: all, withough KPF
k1InstList=( "guiderk1" "hires" "kpf" "lris_blue" "lris_red" "mosfire" "osiris_img" "osiris_spec" )   # all* do not comment out
k1_base_list=${k1InstList[@]}                                                                         #      do not comment out
k1_base_count=${#k1InstList[@]}                                                                       #      do not comment out
k1InstList=( "guiderk1" "hires" "lris_blue" "lris_red" "mosfire" "osiris_img" "osiris_spec" )         # without KPF 
#k1InstList=( "kpf" )                                                                                  # only KPF
k1_run_list=${k1InstList[@]}                                                                          #      do not comment out
k1_run_count=${#k1InstList[@]}                                                                        #      do not comment out

# k1 DRP minitors: all, without KPF
k1InstDrpList=( "kpf" "mosfire" "osiris" )   # all* do not comment out
k1_base_drp_list=${k1InstDrpList[@]}         #      do not comment out
k1_base_drp_count=${#k1InstDrpList[@]}       #      do not comment out
k1InstDrpList=( "mosfire" "osiris" )         # without KPF DRP
#k1InstDrpList=( "kpf" )                      # only KPF DRP
k1_run_drp_list=${k1InstDrpList[@]}          #      do not comment out
k1_run_drp_count=${#k1InstDrpList[@]}        #      do not comment out

#k1InstListAll     = ( "guiderk1" "hires" "kpf" "lris_blue" "lris_red" "mosfire" "osiris_img" "osiris_spec" )   # all*
#k1InstListNoKPF   = ( "guiderk1" "hires" "lris_blue" "lris_red" "mosfire" "osiris_img" "osiris_spec" )         # without KPF
#k1InstListOnlyKPF = ( "kpf" )                                                                                  # only KPF

#k1InstDrpListAll=( "kpf" "mosfire" "osiris" )    # all*
#k1InstDrpListNoKPF=( "mosfire" "osiris" )        # without KPF DRP
#k1InstDrpListOnlyKPF=( "kpf" )                   # only KPF DRP

## ===== k2 monitors ===== ##

# k2 L0 monitors: all, without ESI, ESI only
k2InstList=( "deimos_fcs" "deimos_spec" "esi" "guiderk2" "kcwi_blue" "kcwi_fcs" "kcwi_red" "nirc2_unp" "nirc2" "nires_img" "nires_spec" "nirspec_scam" "nirspec_spec" )   # all* do not comment out
k2_base_list=${k2InstList[@]}                                                                                                                                             #      do not comment out
k2_base_count=${#k2InstList[@]}                                                                                                                                           #      do not comment out
#k2InstList=( "deimos_fcs" "deimos_spec" "guiderk2" "kcwi_blue" "kcwi_fcs" "kcwi_red" "nirc2_unp" "nirc2" "nires_img" "nires_spec" "nirspec_scam" "nirspec_spec" )         # without ESI
#k2InstList=( "deimos_fcs" "deimos_spec" "esi" "guiderk2" "kcwi_blue" "kcwi_fcs" "kcwi_red" "nirc2_unp" "nirc2" "nires_img" "nires_spec")                                  # without NIRSPEC scam and sprc
k2InstList=( "deimos_fcs" "deimos_spec" "guiderk2" "kcwi_blue" "kcwi_fcs" "kcwi_red" "nirc2_unp" "nirc2" "nires_img" "nires_spec" )                                       # without ESI and NIRSPEC scam and spec
#k2InstList=( "esi" )                                                                                                                                                      # only ESI
#k2InstList=( "nirspec_scam" "nirspec_spec" )                                                                                                                              # only NIRSPEC scam and spec
#k2InstList=( "esi" "nirspec_scam" nirspec_spec" )                                                                                                                         # only ESI, NIRSPEC scam and spec
k2_run_list=${k2InstList[@]}                                                                                                                                              #      do not comment out
k2_run_count=${#k2InstList[@]}                                                                                                                                            #      do not comment out

# k2 DRP monitors: all, without ESI, ESI only
k2InstDrpList=( "kcwi" "deimos" "esi" "nirc2" "nires" )    # all* do not comment out
k2_base_drp_list=${k2InstDrpList[@]}                       #      do not comment out
k2_base_drp_count=${#k2InstDrpList[@]}                     #      do not comment out
k2InstDrpList=( "kcwi" "deimos" "nirc2" "nires" )          # without ESI DRP
#k2InstDrpList=( "esi" )                                    # only ESI DRP
k2_run_drp_list=${k2InstDrpList[@]}                        #      do not comment out
k2_run_drp_count=${#k2InstDrpList[@]}                      #      do not comment out

#k2InstListAll=( "deimos_fcs" "deimos_spec" "esi" "guiderk2" "kcwi_blue" "kcwi_fcs" "kcwi_red" "nirc2_unp" "nirc2" "nires_img" "nires_spec" "nirspec_scam" "nirspec_spec" )   # all*
#k2InstListNoESI=( "deimos_fcs" "deimos_spec" "guiderk2" "kcwi_blue" "kcwi_fcs" "kcwi_red" "nirc2_unp" "nirc2" "nires_img" "nires_spec" "nirspec_scam" "nirspec_spec" )       # without ESI
#k2InstListOnlyESI=( "esi" )                                                                                                                                                  # only ESI

#k2InstDrpListAll=( "kcwi" "deimos" "esi" "nirc2" "nires" )  # all*
#k2InstDrpListNoESI=( "kcwi" "deimos" "nirc2" "nires" )      # without ESI DRP
#k2InstDrpListOnlyESI=( "esi" )                              # only ESI DRP

## ===== k0 (all) monitors (for build server) =====
k0_base_list=("${k1_base_list[@]} ${k2_base_list[@]}")
k0_base_count=$((k1_base_count + k2_base_count))
k0_run_list=("${k1_run_list[@]} ${k2_run_list[@]}")
k0_run_count=$((k1_run_count + k2_run_count))
k0_base_drp_list=("${k1_base_drp_list[@]} ${k2_base_drp_list[@]}")
k0_base_drp_count=$((k1_base_drp_count + k2_base_drp_count))
k0_run_drp_list=("${k1_run_drp_list[@]} ${k2_run_drp_list[@]}")
k0_run_drp_count=$((k1_run_drp_count + k2_run_drp_count))
echo

hostname=`hostname -s`
case ${hostname} in
  "ADD_SVR_NAME") svr="k1" ;;
  "ADD_SVR_NAME") svr="k2" ;;
  "ADD_SVR_NAME") svr="k0" ;;
  *) echo -e "\nInvalid server ${hostname}\n"; exit ;;
esac

case "$#" in
  0) cmd="status" ;;
  1) cmd=$1 ;;
  2) cmd=$1;
     if [[ ${svr} -eq "k0" ]]; then
       svr=$2
     fi
     ;;
  *) echo -e "\nInvalid number of arguments : restart|start|stop|status k0|k1|k2\n"; exit ;;
esac

case $svr in
  "k1")
    #inst_base_list=${k1_base_list[@]}
    inst_base_list=("${k1_base_list[@]}")
    inst_base_count=$((k1_base_count))
    inst_run_list=("${k1_run_list[@]}")
    inst_run_count=$((k1_run_count))
    inst_base_drp_list=("${k1_base_drp_list[@]}")
    inst_base_drp_count=$((k1_base_drp_count))
    inst_run_drp_list=("${k1_run_drp_list[@]}")
    inst_run_drp_count=$((k1_run_drp_count))
    ;;
  "k2")
    inst_base_list=${k2_base_list[@]}
    inst_base_count=$((k2_base_count))
    inst_run_list=${k2_run_list[@]}
    inst_run_count=$((k2_run_count))
    inst_base_drp_list=${k2_base_drp_list[@]}
    inst_base_drp_count=$((k2_base_drp_count))
    inst_run_drp_list=${k2_run_drp_list[@]}
    inst_run_drp_count=$((k2_run_drp_count))
    ;;
  "k0")
    inst_base_list=${k0_base_list[@]}
    inst_base_count=${k0_base_count}
    inst_run_list=${k0_run_list[@]}
    inst_run_count=$((k0_run_count))
    inst_base_drp_list=${k0_base_drp_list[@]}
    inst_base_drp_count=$((k0_base_drp_count))
    inst_run_drp_list=${k0_run_drp_list[@]}
    inst_run_drp_count=$((k0_run_drp_count))
    ;;
  *)
    echo -e "Invalid server arg: ${svr}\n"
    exit
    ;;
esac

case $cmd in

  "status")
    ;;

  "restart")
    echo "Restarting $svr Monitors"; echo
    for instr in ${inst_run_list[@]}; do
      /usr/local/koa/dep-rti/default/src/monitor.sh ${instr}
      pid=`ps -ef | grep "monitor.py" | grep -v _drp | grep -v grep | grep -w ${instr} | awk -F " " '{print $2}'`
      echo "   Re/Started ${instr} monitor as PID=$pid"
      ps -ef | grep "monitor.py" | grep -v _drp | grep -v grep | grep -w ${instr}
      echo -e "   Sleeping ${wait_secs}...\n"
      sleep ${wait_secs}
    done

    echo "Restarting $svr DRP Monitors"; echo
    for instr in ${inst_run_drp_list[@]}; do
      /usr/local/koa/dep-rti/default/src/monitor_drp.sh ${instr}
      pid=`ps -ef | grep monitor_drp | grep -v grep | grep -w ${instr} | awk -F " " '{print $2}'`
      echo "   Started PID=$pid"
      ps -ef | grep monitor_drp | grep -v grep | grep -w ${instr}
      echo -e "   Sleeping ${wait_secs}...\n"
      sleep ${wait_secs}
    done
    ;;

  "start")
    echo "Launching $svr Monitors"; echo
    for instr in ${inst_run_list[@]}; do
      pid=`ps -ef | grep "monitor.py" | grep -v _drp | grep -v grep | grep -w ${instr} | awk -F " " '{print $2}'`
      if [ -z ${pid} ]; then
        /usr/local/koa/dep-rti/default/src/monitor.sh ${instr}
        pid=`ps -ef | grep "monitor.py" | grep -v _drp | grep -v grep | grep -w ${instr} | awk -F " " '{print $2}'`
        echo "   Started PID=${pid} monitor for ${instr} since it was not running"
        ps -ef | grep "monitor.py" | grep -v _drp | grep -v grep | grep -w ${instr}
        echo -e "   Sleeping ${wait_secs}...\n"
        sleep ${wait_secs}
      else
        echo -e "   ${instr} monitor not started since PID=$pid is already running\n"
      fi
    done

    echo "Launching $svr DRP Monitors"; echo
    for instr in ${inst_run_drp_list[@]}; do
      pid=`ps -ef | grep monitor_drp | grep -v grep | grep -w ${instr} | awk -F " " '{print $2}'`
      if [ -z ${pid} ]; then
        /usr/local/koa/dep-rti/default/src/monitor_drp.sh ${instr}
        pid=`ps -ef | grep monitor_drp | grep -v grep | grep -w ${instr} | awk -F " " '{print $2}'`
        echo "   Started PID=${pid} DRP monitor for ${instr} since it was not running"
        ps -ef | grep monitor_drp | grep -v grep | grep -w ${instr}
        echo -e "   Sleeping ${wait_secs}...\n"
        sleep ${wait_secs}
      else
        echo -e "   ${instr} DRP monitor not started since PID=$pid is already running\n"
      fi
    done
    ;;

  "stop")
    echo -e "Terminating $svr Monitors\n"
    for instr in ${inst_run_list[@]}; do
      ps -ef | grep "monitor.py" | grep -v _drp | grep -v grep | grep -w ${instr}
      pid=`ps -ef | grep "monitor.py" | grep -v _drp | grep -v grep | grep -w ${instr} | awk -F " " '{print $2}'`
      if [ ! -z ${pid} ]; then
        kill -15 $pid
        echo -e "   Stopped DRP for PID=${pid}\n"
      else
        echo -e "   ${instr} Monitor not terminated since it was not running\n"
      fi
    done

    echo -e "Terminating $svr DRP Monitors\n"
    for instr in ${inst_run_drp_list[@]}; do
      ps -ef | grep monitor_drp | grep -v grep | grep -w ${instr}
      pid=`ps -ef | grep monitor_drp | grep -v grep | grep -w ${instr} | awk -F " " '{print $2}'`
      if [ ! -z ${pid} ]; then
        kill -15 $pid
        echo -e "   Stopped DRP Monitor for PID=${pid}\n"
      else
        echo -e "   ${instr} DRP Monitor not terminated since it was not running\n"
      fi
    done
    ;;

  *)
    echo -e "\nInvalid command arg: ${cmd}\n"
    exit
    ;;
esac

echo -e "\n=====================================================\n"
echo -e "Monitor Controller Summary for ${hostname} (${svr}):"
echo -e "${wait_secs} secs delay between start commands"
echo -e "Command: ${cmd}\n"

mon_procs_lst=`ps -ef | grep "monitor.py" | grep -v grep | sort | grep -v _drp`
mon_procs_cnt=`ps -ef | grep "monitor.py" | grep -v grep | sort | grep -v _drp | wc -l`
echo -e "=== Raw (L0) Base Instrument Monitors: ${inst_base_count} Possible ===\n[${inst_base_list[@]}]\n"
echo -e "Requested Instruments: ${inst_run_count}\n[${inst_run_list[@]}]\n"
echo -e "Running: ${mon_procs_cnt}\n${mon_procs_lst[@]}"

drp_procs_lst=`ps -ef | grep monitor_drp | grep -v grep | sort`
drp_procs_cnt=`ps -ef | grep monitor_drp | grep -v grep | sort | wc -l`
echo -e "\n=== DRP Base Instrument Monitors: ${inst_base_drp_count} Possible ===\n[${inst_base_drp_list[@]}]\n"
echo -e "Requested DRP Instruments: ${inst_run_drp_count}\n[${inst_run_drp_list[@]}]\n"
echo -e "Running: ${drp_procs_cnt}\n${drp_procs_lst[@]}"

echo -e "\nNote: For any mismatch amounts, wait a few seconds, then re-run monctl for status"
echo -e " - If multiple monitors per instrument, either"
echo -e "      wait until child processes complete and re-run monctl stop"
echo -e "      or run monctl stop to terminate immediately"
echo -e " - If instrument was requested and no process(es) listed, instrument/subsystem may be down"
echo
